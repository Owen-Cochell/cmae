/**
 * @file fund_oscillator_test.cpp
 * @author Owen Cochell (owencochell@gmail.com)
 * @brief This class tests the fundamental oscillators
 * @version 0.1
 * @date 2022-10-01
 * 
 * @copyright Copyright (c) 2022
 * 
 */

#include <gtest/gtest.h>
#include "fund_oscillator.hpp"

// Vector of an ideal sine wave, generated in Audacity
std::vector<long double> prime_sine = {0.00000,0.06265,0.12505,0.18696,0.24814,0.30834,0.36733,0.42488,0.48075,0.53474,0.58663,0.63622,0.68330,0.72770,0.76924,0.80776,0.84310,0.87514,0.90373,0.92878,0.95017,0.96783,0.98170,0.99170,0.99781,0.99999,0.99825,0.99259,0.98303,0.96960,0.95237,0.93139,0.90676,0.87856,0.84691,0.81194,0.77377,0.73257,0.68848,0.64170,0.59239,0.54075,0.48699,0.43131,0.37395,0.31511,0.25503,0.19395,0.13212,0.06976,0.00712,-0.05554,-0.11798,-0.17996,-0.24123,-0.30155,-0.36069,-0.41842,-0.47450,-0.52871,-0.58085,-0.63070,-0.67808,-0.72279,-0.76467,-0.80354,-0.83925,-0.87167,-0.90066,-0.92611,-0.94793,-0.96602,-0.98031,-0.99076,-0.99731,-0.99994,-0.99865,-0.99343,-0.98431,-0.97132,-0.95452,-0.93396,-0.90974,-0.88194,-0.85068,-0.81608,-0.77827,-0.73740,-0.69363,-0.64714,-0.59811,-0.54673,-0.49320,-0.43773,-0.38054,-0.32186,-0.26191,-0.20094,-0.13917,-0.07686,-0.01425,0.04842,0.11090,0.17295,0.23431,0.29476,0.35404,0.41194,0.46821,0.52265,0.57503,0.62516,0.67283,0.71785,0.76006,0.79928,0.83536,0.86815,0.89754,0.92340,0.94563,0.96415,0.97888,0.98977,0.99676,0.99984,0.99899,0.99422,0.98554,0.97299,0.95662,0.93648,0.91267,0.88528,0.85440,0.82017,0.78272,0.74219,0.69875,0.65256,0.60380,0.55268,0.49938,0.44412,0.38712,0.32860,0.26878,0.20791,0.14622,0.08396,0.02137,-0.04131,-0.10382,-0.16593,-0.22738,-0.28794,-0.34737,-0.40543,-0.46191,-0.51656,-0.56919,-0.61958,-0.66754,-0.71288,-0.75541,-0.79498,-0.83142,-0.86460,-0.89438,-0.92064,-0.94329,-0.96224,-0.97740,-0.98872,-0.99616,-0.99969,-0.99929,-0.99496,-0.98672,-0.97461,-0.95867,-0.93896,-0.91556,-0.88857,-0.85808,-0.82423,-0.78713,-0.74695,-0.70382,-0.65794,-0.60947,-0.55860,-0.50554,-0.45050,-0.39368,-0.33532,-0.27564,-0.21487,-0.15327,-0.09106,-0.02849,0.03419,0.09673,0.15890,0.22044,0.28111,0.34068,0.39891,0.45558,0.51045,0.56332,0.61398,0.66222,0.70786,0.75072,0.79064,0.82744,0.86100,0.89117,0.91784,0.94090,0.96027,0.97587,0.98763,0.99551,0.99949,0.99953,0.99565,0.98785,0.97618,0.96067,0.94139,0.91840,0.89181,0.86172,0.82824,0.79151,0.75166,0.70887,0.66329,0.61510,0.56450,0.51168,0.45684,0.40022,0.34202,0.28248,0.22183,0.16030,0.09815,0.03561,-0.02707,-0.08964,-0.15186,-0.21348,-0.27427,-0.33397,-0.39237,-0.44922,-0.50431,-0.55742,-0.60834,-0.65687,-0.70281,-0.74600,-0.78625,-0.82342,-0.85735,-0.88791,-0.91499,-0.93847,-0.95826,-0.97429,-0.98649,-0.99482,-0.99923,-0.99972,-0.99629,-0.98894,-0.97770,-0.96262,-0.94377,-0.92120,-0.89501,-0.86531,-0.83221,-0.79584,-0.75634,-0.71387,-0.66860,-0.62070,-0.57036,-0.51778,-0.46317,-0.40674,-0.34871,-0.28930,-0.22877,-0.16733,-0.10524,-0.04273,0.01995,0.08254,0.14481,0.20652,0.26741,0.32725,0.38581,0.44285,0.49815,0.55149,0.60267,0.65148,0.69773,0.74124,0.78183,0.81936,0.85366,0.88461,0.91209,0.93598,0.95620,0.97266,0.98530,0.99407,0.99893,0.99987,0.99688,0.98997,0.97917,0.96453,0.94610,0.92395,0.89817,0.86886,0.83614,0.80013,0.76098,0.71884,0.67388,0.62627,0.57620,0.52386,0.46947,0.41323,0.35537,0.29612,0.23570,0.17435,0.11232,0.04985,-0.01282,-0.07544,-0.13776,-0.19954,-0.26054,-0.32051,-0.37923,-0.43645,-0.49196,-0.54553,-0.59697,-0.64606,-0.69261,-0.73643,-0.77737,-0.81525,-0.84993,-0.88127,-0.90915,-0.93345,-0.95409,-0.97098,-0.98406,-0.99327,-0.99857,-0.99996,-0.99741,-0.99095,-0.98059,-0.96639,-0.94838,-0.92665,-0.90128,-0.87237,-0.84003,-0.80439,-0.76559,-0.72378,-0.67913,-0.63181,-0.58201,-0.52992,-0.47575,-0.41971,-0.36202,-0.30291,-0.24261,-0.18136,-0.11939,-0.05696,0.00570,0.06834,0.13070,0.19256,0.25365,0.31376,0.37262,0.43003,0.48574,0.53955,0.59124,0.64060,0.68745,0.73160,0.77287,0.81111,0.84616,0.87788,0.90616,0.93087,0.95193,0.96925,0.98276,0.99242,0.99817,1.00000,0.99790,0.99188,0.98197,0.96819,0.95062,0.92930,0.90434,0.87583,0.84387,0.80860,0.77015,0.72868,0.68434};


TEST(SineOscillator, Construct) {

    // Create the oscillator:

    SineOscillator sine (440.0);

    // Ensure the frequency is valid:

    ASSERT_DOUBLE_EQ(sine.get_frequency(), 440.0);
}

TEST(SineOscillator, Process) {

    // Create the oscillator:

    SineOscillator sine (440.0);

    // Process the oscillator:

    sine.meta_process();

    // Get the buffer:

    AudioBuffer buff = sine.get_buffer();

    // Ensure the number of samples is correct:

    ASSERT_EQ(int(buff->size()), sine.get_info()->buff_size);

    // Ensure each value is close:

    for (auto i = 0; i < buff->size(); i++) {

        // Use assert near, prime sine is not as accurate as long double:
        ASSERT_NEAR(buff->at(i), prime_sine.at(i), 0.0001);

    }
}
